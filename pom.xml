<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.edu.ahpu.mvn-demo</groupId>
    <artifactId>mvn-demo1</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <!-- 文件拷贝时的编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <catalina.home>D:\study\tomcat\apache-tomcat-8.5.15</catalina.home>
        <app.name>${project.build.finalName}.${project.packaging}</app.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.5</version>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.3</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/redis.clients/jedis -->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.9.0</version>
        </dependency>

        <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.2.3</version>
            <classifier>jdk15</classifier>
        </dependency>

    </dependencies>

    <build>
        <!--默认源代码目录-->
        <sourceDirectory>src/main/java</sourceDirectory>

        <!--默认测试源代码目录-->
        <testSourceDirectory>src/test/java</testSourceDirectory>

        <!--默认资源目录-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>

        <!--默认测试资源目录-->
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>




        <plugins>
            <!--
              1.自带mvn-help插件， 直接使用如下命令：
                  mvn help:describe -DgroupId=org.somewhere -DartifactId=some-plugin -Dversion=0.0.0

              2.自带cobertura代码覆盖率插件
                  mvn cobertura:cobertura
           -->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <configuration>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                </configuration>
                <executions>
                    <!--绑定到test之后，直接执行 -->
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>cobertura</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 解决maven test命令时console出现中文乱码乱码 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.7.2</version>
                <configuration>
                    <forkMode>once</forkMode>
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                    <includes>
                        <include>**/*.java</include>
                    </includes>

                    <!--
                           跳过测试阶段
                           package -Dmaven.test.skip=true,
                           也可以使用<skip>
                        -->
                  <!--  <skip>true</skip>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <!--绑定在compile生命周期之后执行,source:jar，source:test-jar -->
                       <phase>compile</phase>
                        <goals>
                             <goal>jar</goal>
                             <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-rar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <includeJar>true</includeJar>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>rar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>1.5</version>
                <configuration>
                    <driver>com.mysql.jdbc.Driver</driver>
                    <forceMojoExecution></forceMojoExecution>
                    <url>jdbc:mysql://127.0.0.1:3306</url>
                    <username>root</username>
                    <password>admin</password>
                </configuration>
                <executions>
                    <execution>
                        <id>create-db</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <sqlCommand>create database if not EXISTS mvn_test_db</sqlCommand>
                        </configuration>
                    </execution>

                    <execution>
                        <id>init-table</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <srcFiles>
                                <srcFile>src/main/resources/init.sql</srcFile>
                            </srcFiles>
                        </configuration>
                    </execution>
                </executions>
                <!-- 仅在使用插件时，使用依赖-->
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.24</version>
                    </dependency>
                </dependencies>

            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>replace-propeties</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <delete file="${project.build.directory}/classes/redis-config.properties" />
                                <copy file="${project.build.directory}/classes/redis-config-product.properties" tofile="${project.build.directory}/classes/redis-config.properties"/>
                            </tasks>
                        </configuration>
                    </execution>

                    <execution>
                        <id>upload-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <move file="${project.build.directory}/${app.name}" tofile="${catalina.home}/webapps/${app.name}"/>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

    <distributionManagement>
        <!-- repository.id 和 snapshotRepository.id 使用settings.xml中的server.id-->
        <repository>
            <id>nexus-release</id>
            <name>RELEASE repository</name>
            <url>http://localhost:8081/nexus/content/repositories/releases/</url>
        </repository>

        <snapshotRepository>
            <id>nexus-snapshot</id>
            <name>SNAPSHOT repository</name>
            <url>http://localhost:8081/nexus/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

</project>